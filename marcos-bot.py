#!/usr/bin/env python3 
import os
import argparse
import telepot
import time
import os
import cry_detector
import periodic_timer

from threading import Thread
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
from telepot.delegate import per_chat_id, create_open
 
class Marcos(telepot.helper.ChatHandler):
   def __init__(self, seed_tuple, timeout):
      super(Marcos, self).__init__(seed_tuple, timeout)
      self.alarm_text_list  = ["Bua", "Buaaaaa"]
      self.alarm_text_index = 0
      self._count = 0
      self._editor = None
      self._keyboard = InlineKeyboardMarkup(inline_keyboard=
            [[
               InlineKeyboardButton(text='Stop', callback_data='stop_cry_detector'),
               InlineKeyboardButton(text='Reset', callback_data='reset_cry_detector'),
            ]])
      
   def stop_cry_detector(self):
      periodic_timer.cancel()
      cry_detector.clean()
   
   def do_alert(self):
      alarm_text = self.alarm_text_list[self.alarm_text_index]
      self._editor.editMessageText(alarm_text, reply_markup=self._keyboard)
      self.alarm_text_index = (self.alarm_text_index + 1) % len(self.alarm_text_list)
   
   def setup_cry_detector(self):
      cry_detector.register(lambda: periodic_timer.start(lambda: self.do_alert()))
   
   def on_chat_message(self, msg):
    global state_machine
    global args
    content_type, chat_type, chat_id = telepot.glance(msg) 
    user_id=msg['from']['id']
    if user_id != args.user_id:
        self.sender.sendMessage("Go away stalker !!!")
        return
    if (content_type == 'text'):
      text    = msg['text']
      if text == '/crydetector':
         sent = self.sender.sendMessage('Cry detector', reply_markup=self._keyboard)
         self._editor = telepot.helper.Editor(self.bot, sent)
         self.stop_cry_detector()
         self.setup_cry_detector()   
   def on_callback_query(self, msg):
      query_id, from_id, data = telepot.glance(msg, flavor='callback_query')
      if data == 'stop_cry_detector':
         self.stop_cry_detector()
         self._editor.editMessageText("Bye!")
         #self._editor.editMessageReplyMarkup(reply_markup=None)
         self.close()
      elif data == 'reset_cry_detector':
         self.bot.answerCallbackQuery(query_id, text='Reseting cry detector')
         self.stop_cry_detector()
         self.setup_cry_detector() 

parser = argparse.ArgumentParser(description='Instagram bot for Marcos operations.')
parser.add_argument("token", help="Telegram bot token string as generated by BotFather")
parser.add_argument("user_id", help="Telegram user ID to restrict the bot", type=int)
parser.parse_args()
args = parser.parse_args()


# Getting the token from command-line is better than embedding it in code,
# because tokens are supposed to be kept secret.

cry_detector = cry_detector.CryDetector(threshold=5000)
periodic_timer = periodic_timer.PeriodicTimer(interval=1)

cry_detector_thread = Thread(target = lambda: cry_detector.start())
cry_detector_thread.daemon = True
cry_detector_thread.start()

bot = telepot.DelegatorBot(args.token, [
    (per_chat_id(types=['private']), create_open(Marcos, timeout=360)),
])

bot.message_loop()
cry_detector_thread.join()
